package es.uniovi.asw.votingdb;


import es.uniovi.asw.votingdb.domain.*;
import org.junit.Test;

import java.util.HashSet;
import java.util.Set;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

public class ModelTest {

    private Long id_Vote=new Long(1);


    @Test
    /**
     * Pa que el porcentaje sea mas alto
     */
    public void getAndSetTests(){
        PollingStation pollingStation = new PollingStation();
        Voter voter = new Voter(); voter.setNif("00000000A");
        Vote vote = new Vote(); vote.setId(new Long(0));
        Option option = new Option();

        Set<Voter> listVoters = new HashSet<Voter>(); listVoters.add(voter);
        Set<Vote> listVotes = new HashSet<Vote>(); listVotes.add(vote);


        //Polling
        pollingStation.setPolling_station_code(new Long(0));
        pollingStation.setCity("c");
        pollingStation.setCountry("w");
        pollingStation.setProvince("p");
        pollingStation.setDistrict("d");
        pollingStation.setVoters(listVoters);
        pollingStation.setVotes(listVotes);

        assertEquals(0,(int)pollingStation.getPolling_station_code());
        assertEquals("c",pollingStation.getCity());
        assertEquals("w",pollingStation.getCountry());
        assertEquals("p",pollingStation.getProvince());
        assertEquals("d",pollingStation.getDistrict());
        assertTrue(pollingStation.getVoters().contains(voter));
        assertTrue(pollingStation.getVotes().contains(vote));


        //Voter
        voter.setId(new Long(0));
        voter.setEmail("a@a.a");
        voter.setHas_evoted(false);
        voter.setHas_pvoted(false);
        voter.setName("a");
        voter.setSalt("#");
        voter.setPassword("a");
        voter.setPollingStation(pollingStation);

        assertEquals(0,(int)voter.getId());
        assertEquals("a@a.a",voter.getEmail());
        assertEquals(false,voter.isHas_evoted());
        assertEquals(false,voter.isHas_pvoted());
        assertEquals("a",voter.getName());
        assertEquals("00000000A",voter.getNif());
        assertEquals("#",voter.getSalt());
        assertEquals("a",voter.getPassword());
        assertEquals(pollingStation,voter.getPollingStation());

        //Vote
        vote.setPollingStation(pollingStation);
        vote.setOption(option);

        assertEquals(0,(int)vote.getId());
        assertEquals(option,vote.getOption());
        assertEquals(pollingStation,vote.getPollingStation());

        //Option
        option.setComment("c");
        option.setName("n");
        option.setOption_id(new Long(0));
        option.setVotes(listVotes);

        assertEquals("c",option.getComment());
        assertEquals("n",option.getName());
        assertEquals(0,(int)option.getOption_id());
        assertTrue(option.getVotes().contains(vote));



    }

    @Test
    /**
     * Test de los metodos de la clase association
     */
    public void linkUnlinkTests() {
        //Creamos las polling y los voters
        PollingStation p1 = new PollingStation("Asturias", "Jogin", "Cimavilla", "España");
        PollingStation p2 = new PollingStation("Asturias", "Oviedo", "El Cristo", "España");

        //simular el id autogenerated
        p1.setPolling_station_code(new Long(1));
        p2.setPolling_station_code(new Long(2));

        Voter vA = new Voter("A","00000000A","A@A.A",p1,"A");
        Voter vB = new Voter("B","00000001B","B@B.B",p1,"B");
        Voter vC = new Voter("C","00000002C","C@C.C",p1,"C");
        Voter vD = new Voter("D","00000003D","D@D.D",p2,"D");

        //simular el id autogenerated
        vA.setId(new Long(1));
        vB.setId(new Long(2));
        vC.setId(new Long(3));
        vD.setId(new Long(4));

        //Comprobamos que haya funcionado el link
        assertEquals(3,p1.getVoters().size());
        assertTrue(p1.getVoters().contains(vA));
        assertTrue(p1.getVoters().contains(vB));
        assertTrue(p1.getVoters().contains(vC));
        assertFalse(p1.getVoters().contains(vD));
        assertEquals(1,p2.getVoters().size());
        assertTrue(p2.getVoters().contains(vD));

        //Creamos las opciones de voto
        Option o1 = new Option("O1","option 1");
        Option o2 = new Option("O2","option 2");
        o1.setOption_id(new Long(0));
        o2.setOption_id(new Long(1));

        //Añadimos los votos
        Vote v1 = vota(vA,o1);
        Vote v2 = vota(vB,o2);

        assertEquals(1,o1.getVotes().size());
        assertEquals(1,o2.getVotes().size());

        Vote v3 = vota(vC,o2);
        Vote v4 = vota(vD,o1);

        assertEquals(2,o1.getVotes().size());
        assertEquals(2,o2.getVotes().size());

        assertTrue(o1.getVotes().contains(v1));
        assertTrue(o1.getVotes().contains(v4));
        assertTrue(o2.getVotes().contains(v2));
        assertTrue(o2.getVotes().contains(v3));

        assertEquals(1,p2.getVotes().size());
        assertEquals(3,p1.getVotes().size());
        assertTrue(p1.getVotes().contains(v1));
        assertTrue(p1.getVotes().contains(v2));
        assertTrue(p1.getVotes().contains(v3));
        assertTrue(p2.getVotes().contains(v4));


        //Equals
        assertTrue(o1.equals(o1));
        assertTrue(vA.equals(vA));
        assertTrue(p1.equals(p1));
        assertTrue(v1.equals(v1));
        assertFalse(o1.equals(null));
        assertFalse(vA.equals(null));
        assertFalse(p1.equals(null));
        assertFalse(v1.equals(null));
        assertFalse(o1.equals(o2));
        assertFalse(vA.equals(vB));
        assertFalse(p1.equals(p2));
        assertFalse(v1.equals(v2));

        //ToString
        assertFalse(o1.toString().isEmpty());
        assertFalse(vA.toString().isEmpty());
        assertFalse(p1.toString().isEmpty());
        assertFalse(v1.toString().isEmpty());

        //Hashcodes
        assertTrue(o1.hashCode()!=o2.hashCode());
        assertTrue(v1.hashCode()!=v2.hashCode());
        assertTrue(p1.hashCode()!=p2.hashCode());
        assertTrue(vA.hashCode()!=vB.hashCode());


        //Hacemos los unlink
        Association.Belong.unlink(vA,p1);
        Association.Belong.unlink(vB,p1);
        Association.Belong.unlink(vC,p1);
        Association.Belong.unlink(vD,p2);

        Association.Exercise.unlink(p1,v1);
        Association.Exercise.unlink(p1,v2);
        Association.Exercise.unlink(p1,v3);
        Association.Exercise.unlink(p2,v4);

        Association.InFavorOf.unlink(o1,v1);
        Association.InFavorOf.unlink(o2,v2);
        Association.InFavorOf.unlink(o2,v3);
        Association.InFavorOf.unlink(o1,v4);

        //Comprobamos que haya funcionado el unlink
        assertEquals(0,p1.getVoters().size());
        assertFalse(p1.getVoters().contains(vA));
        assertFalse(p1.getVoters().contains(vB));
        assertFalse(p1.getVoters().contains(vC));
        assertEquals(0,p2.getVoters().size());
        assertFalse(p2.getVoters().contains(vD));

        assertTrue(v1.getPollingStation()==null);
        assertTrue(v1.getOption()==null);

    }

    private Vote vota(Voter v, Option o)
    {
        Vote vote = new Vote(o,v.getPollingStation());
        vote.setId(id_Vote++);
        return vote;
    }

}
